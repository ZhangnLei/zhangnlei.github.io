<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张念磊的博客</title>
  
  <subtitle>我</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-14T05:07:21.706Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>张念磊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么说爱抱怨、喜欢找借口的人往往一事无成？《被讨厌的勇气》 - 阿德勒的人生哲学！ </title>
    <link href="http://yoursite.com/2020/05/14/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E7%88%B1%E6%8A%B1%E6%80%A8%E3%80%81%E5%96%9C%E6%AC%A2%E6%89%BE%E5%80%9F%E5%8F%A3%E7%9A%84%E4%BA%BA%E5%BE%80%E5%BE%80%E4%B8%80%E4%BA%8B%E6%97%A0%E6%88%90%EF%BC%9F%E3%80%8A%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94%E3%80%8B-%E9%98%BF%E5%BE%B7%E5%8B%92%E7%9A%84%E4%BA%BA%E7%94%9F%E5%93%B2%E5%AD%A6%EF%BC%81/"/>
    <id>http://yoursite.com/2020/05/14/为什么说爱抱怨、喜欢找借口的人往往一事无成？《被讨厌的勇气》-阿德勒的人生哲学！/</id>
    <published>2020-05-14T05:03:36.000Z</published>
    <updated>2020-05-14T05:07:21.706Z</updated>
    
    <content type="html"><![CDATA[<p>发现名人自传、访谈中那些人很少抱怨，很少找借口，在自己的领域做出成就。</p><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>而大多数人都喜欢推卸责任，因为人会有推卸责任的习惯，会找那些经历来解释当前的状态，把过去搬出来解释自己现在，把不幸当成自己的借口，推卸自己的责任</p><h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><p>没有必要把活着的经历去纠结那些完全无法改变的事，但是我们完全有能力去改变现在呀，从而去影响明天。</p><p>阿德勒认为，我们成年后，就要为自己的行为负责，为自己的人生负责。</p><p>我们每时每刻都在做选择，读什么样的书？看什么样的剧？听什么样的歌？关注哪些人？和谁去结婚？做什么样的职业？甚至每天的时间是如何安排的？精力主要用在了什么地方？</p><p>这一切都是自己的选择，是自己一次又一次的义无反顾的选择，把你送到了现在的位置、达到了现在的状态。</p><p>无需抱怨自己拿到了什么样牌，而是考虑如何打好现有的牌，这才是务实有建设性人生态度。</p><p>没有谁的人生是完美后才出发的</p><p><code>承认自己的不足需要勇气，但这也是进步的开始。</code></p><p>原视频</p><p><a href="https://www.bilibili.com/video/BV1i7411v7PF" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1i7411v7PF</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发现名人自传、访谈中那些人很少抱怨，很少找借口，在自己的领域做出成就。&lt;/p&gt;
&lt;h3 id=&quot;为什么&quot;&gt;&lt;a href=&quot;#为什么&quot; class=&quot;headerlink&quot; title=&quot;为什么&quot;&gt;&lt;/a&gt;为什么&lt;/h3&gt;&lt;p&gt;而大多数人都喜欢推卸责任，因为人会有推卸责任的
      
    
    </summary>
    
    
      <category term="《被讨厌的勇气》" scheme="http://yoursite.com/tags/%E3%80%8A%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94%E3%80%8B/"/>
    
      <category term="阿德勒" scheme="http://yoursite.com/tags/%E9%98%BF%E5%BE%B7%E5%8B%92/"/>
    
  </entry>
  
  <entry>
    <title>程序员高效学习英语的方法</title>
    <link href="http://yoursite.com/2020/05/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/05/14/程序员高效学习英语的方法/</id>
    <published>2020-05-14T04:19:52.000Z</published>
    <updated>2020-05-14T05:33:13.797Z</updated>
    
    <content type="html"><![CDATA[<p>@auther <code>张念磊</code><br>@date <code>2020/5/14</code></p><p>[toc]</p><h1 id="为什么学英语？"><a href="#为什么学英语？" class="headerlink" title="为什么学英语？"></a>为什么学英语？</h1><p>我的需求：</p><ol><li><p>看英文视频 （教程 发布会）</p></li><li><p>读英文文章 （技术教程、官方文档）</p></li></ol><h1 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h1><p>步骤一：开始学习（学习方法）</p><p>步骤二：<code>坚持</code>（重中之重）</p><p>步骤三：使用（看英文视频、看英文文章。慢慢使用英语，成为工具）</p><h2 id="步骤一：开始学习"><a href="#步骤一：开始学习" class="headerlink" title="步骤一：开始学习"></a>步骤一：开始学习</h2><p>学习有非常多中方法，下面介绍一下我的几种方法</p><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p>使用网站 <a href="https://bdc.youzack.com/" target="_blank" rel="noopener">https://bdc.youzack.com/</a></p><ul><li><p>先背单词</p></li><li><p>再阅读文章</p></li></ul><p>解释：如果我想阅读一篇文章，但是有很多的生词不认识，一遍查一边读效率非常差，很容易放弃。</p><p>这个网站有一个功能，就是你把你自己要读的文章上传上去，然后他会生成一个单词本，我们背这个单词本。单词本会把词频最高的单词放在最前面，让我们先背，出现次数低的后面再背，这样背完，再去读那篇文章。</p><p>有几个优点：</p><p>有针对性、目的性的背单词，效率会很高；</p><p>读文章时会发现，哎，这个单词我背过，会有很好的反馈和<code>成就感</code>。</p><p>成就感 → 多巴胺 → 快乐</p><ul><li>学习听力</li></ul><p>使用网站 <a href="https://bdc.youzack.com/" target="_blank" rel="noopener">https://bdc.youzack.com/</a></p><p>反复练习每一句。</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>马思睿 - B站</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gerx0znvu1j30yx0kmdk3.jpg" alt="image-20200514122513250"></p><p>分享的资源网站：</p><p>ted.com</p><p>复读机App:</p><p>iPhone SpeaterLite</p><p>Android KMPlayer</p><p>下载字幕:</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gerv1w0cp7j30z50krtrz.jpg" alt="image-20200514122154095"></p><p>播客</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gerv3tj49hj30yy0km19t.jpg" alt="image-20200514122341766"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gerv4ibn0vj30yx0kknea.jpg" alt="image-20200514122423957"></p><h2 id="步骤二：坚持"><a href="#步骤二：坚持" class="headerlink" title="步骤二：坚持"></a>步骤二：坚持</h2><p>todo</p><h2 id="步骤三：使用（看英文视频，看英文文章）"><a href="#步骤三：使用（看英文视频，看英文文章）" class="headerlink" title="步骤三：使用（看英文视频，看英文文章）"></a>步骤三：使用（看英文视频，看英文文章）</h2><p>todo</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@auther &lt;code&gt;张念磊&lt;/code&gt;&lt;br&gt;@date &lt;code&gt;2020/5/14&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;为什么学英语？&quot;&gt;&lt;a href=&quot;#为什么学英语？&quot; class=&quot;headerlink&quot; title=&quot;为
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>清单革命 - 怎样使清单更有效？</title>
    <link href="http://yoursite.com/2020/05/13/%E6%B8%85%E5%8D%95%E9%9D%A9%E5%91%BD-%E6%80%8E%E6%A0%B7%E4%BD%BF%E6%B8%85%E5%8D%95%E6%9B%B4%E6%9C%89%E6%95%88%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/05/13/清单革命-怎样使清单更有效？/</id>
    <published>2020-05-13T00:45:41.000Z</published>
    <updated>2020-05-13T01:58:04.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="清单革命-怎样使清单更有效？"><a href="#清单革命-怎样使清单更有效？" class="headerlink" title="清单革命 - 怎样使清单更有效？"></a>清单革命 - 怎样使清单更有效？</h1><p>@auther <code>张念磊</code><br>@date <code>2020/5/13</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1geqklx050gj314x0u0q9u.jpg" alt="清单革命导图"></p><p>[toc]</p><h2 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h2><p><code>TODO</code> 引用一句</p><blockquote><p>金融巨头曾经说过，他之所以能比其他人投资更成功，不仅仅因为他有正确的决策，还有一个很重要的原因就是他能够避免犯一些愚蠢的错误。</p></blockquote><p>作者：阿图.葛文德 《时代周刊》“全球100位影响力人物”榜单的唯一一名医生</p><p>一张手术清单，让原本经常发生的手术感染率从11%下降到0；</p><h2 id="一、人为什么会犯错？"><a href="#一、人为什么会犯错？" class="headerlink" title="一、人为什么会犯错？"></a>一、人为什么会犯错？</h2><p>人的错误可以分为两种：一种是无知之错，一种是无能之错。</p><p>无知之错，说的是因为没有掌握正确的知识， 没有相关的常识犯的错。</p><p>无能之错，说的是虽然掌握的正确的知识，但是没有正确的使用而犯下的错。</p><p>比如飞行员知道起飞前的所有程序，但是起飞前一个事情忘记做一个操作导致飞机失事。</p><p>工作生活中的无能之错：开会记错时间、</p><h2 id="二、为什么要使用清单？"><a href="#二、为什么要使用清单？" class="headerlink" title="二、为什么要使用清单？"></a>二、为什么要使用清单？</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p><code>规避错误</code></p><p>发挥作用的两点原因：</p><p>1）把大脑不擅长的记忆工作外包下来</p><p>2）清单更可靠，通过可视化和强限制性执行来确保完成度</p><h3 id="使用清单的好处？"><a href="#使用清单的好处？" class="headerlink" title="使用清单的好处？"></a>使用清单的好处？</h3><p>避免无能之错</p><p>清单是如何避免无能之错？</p><p>执行清单 解决简单问题</p><p>核查清单 应对复杂问题</p><p>沟通清单 应对不确定性的复杂问题</p><h2 id="三、如何使用清单？"><a href="#三、如何使用清单？" class="headerlink" title="三、如何使用清单？"></a>三、如何使用清单？</h2><h3 id="制定"><a href="#制定" class="headerlink" title="制定"></a>制定</h3><p><code>制定清单的原则</code>：</p><p> <strong>1.</strong> <strong>简单高效可测</strong></p><p> <strong>2.</strong> <strong>设置明确的检查点</strong></p><p> 设置时间：</p><ol><li><p>前</p></li><li><p>中</p></li><li><p>后</p></li><li><p>意外发生时</p><p><strong>3.</strong> <strong>及时更新清单</strong></p></li></ol><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>参考：</p><p><code>得到App 每天听本书 - 《清单革命》</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;清单革命-怎样使清单更有效？&quot;&gt;&lt;a href=&quot;#清单革命-怎样使清单更有效？&quot; class=&quot;headerlink&quot; title=&quot;清单革命 - 怎样使清单更有效？&quot;&gt;&lt;/a&gt;清单革命 - 怎样使清单更有效？&lt;/h1&gt;&lt;p&gt;@auther &lt;code&gt;张念磊&lt;
      
    
    </summary>
    
    
      <category term="清单" scheme="http://yoursite.com/tags/%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>后端开发 - SpringBoot项目名中如何处理service层的异常？</title>
    <link href="http://yoursite.com/2020/05/04/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91-SpringBoot%E9%A1%B9%E7%9B%AE%E5%90%8D%E4%B8%AD%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86service%E5%B1%82%E7%9A%84%E5%BC%82%E5%B8%B8%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/05/04/后端开发-SpringBoot项目名中如何处理service层的异常？/</id>
    <published>2020-05-04T03:07:19.000Z</published>
    <updated>2020-05-05T09:14:53.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后端开发-SpringBoot项目名中如何处理service层的异常？"><a href="#后端开发-SpringBoot项目名中如何处理service层的异常？" class="headerlink" title="后端开发 - SpringBoot项目名中如何处理service层的异常？"></a>后端开发 - SpringBoot项目名中如何处理service层的异常？</h1><p>[toc]</p><p>先说自己犯的错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非常一长串逻辑代码</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">...</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(<span class="string">"&gt;&gt;&gt;className.methodsName,异常原因：&#123;&#125;"</span>, e.getMessage());</span><br><span class="line"><span class="keyword">return</span> CommonMsgUtils.getErrorCommonMsg(commonMsg, ErrorCodeEnum.DATABASE_EXCEPTION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阿里巴巴编码规范 第二章 - 异常处理：</p><blockquote><p>/3. 【强制】catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。 对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。 说明:对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利 于定位问题，这是一种不负责任的表现。 正例:用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于 简单，在程序上作出分门别类的判断，并提示给用户。</p></blockquote><blockquote><p>/4. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请 将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的 内容。</p></blockquote><blockquote><p>/5. 【强制】有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回 滚事务。</p></blockquote><blockquote><p>/6)  级联调用obj.getA().getB().getC();一连串调用，易产生NPE。</p><p>正例:使用 JDK8 的 Optional 类来防止 NPE 问题。</p></blockquote><p>日志：</p><blockquote><p>/4. 【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方 式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//说明(反例):</span></span><br><span class="line">logger.debug(<span class="string">"Processing trade with id: "</span> + id + <span class="string">" and symbol: "</span> + symbol);</span><br></pre></td></tr></table></figure><p> 如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象， 会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。 </p><p>建设采用如下方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正例1:(条件)</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Processing trade with id: "</span> + id + <span class="string">" and symbol: "</span> + symbol);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正例2:(占位符)</span></span><br><span class="line">logger.debug(<span class="string">"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; "</span>, id, symbol);</span><br></pre></td></tr></table></figure></blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/gujiazhouwang/p/12028713.html" target="_blank" rel="noopener">https://www.cnblogs.com/gujiazhouwang/p/12028713.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;后端开发-SpringBoot项目名中如何处理service层的异常？&quot;&gt;&lt;a href=&quot;#后端开发-SpringBoot项目名中如何处理service层的异常？&quot; class=&quot;headerlink&quot; title=&quot;后端开发 - SpringBoot项目名中如
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="异常处理" scheme="http://yoursite.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>使用脚本解放双手 - 批量更新git分支</title>
    <link href="http://yoursite.com/2020/04/29/%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC%E8%A7%A3%E6%94%BE%E5%8F%8C%E6%89%8B-%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0git%E5%88%86%E6%94%AF/"/>
    <id>http://yoursite.com/2020/04/29/使用脚本解放双手-批量更新git分支/</id>
    <published>2020-04-29T01:42:09.000Z</published>
    <updated>2020-04-29T02:29:35.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用脚本批量更新git分支"><a href="#使用脚本批量更新git分支" class="headerlink" title="使用脚本批量更新git分支"></a>使用脚本批量更新git分支</h1><p>@auther <code>张念磊</code><br>@date <code>2020/4/29</code></p><p>[toc]</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>使用脚本，解放双手</p><h3 id="先上代码"><a href="#先上代码" class="headerlink" title="先上代码"></a>先上代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">function readfile ()</span><br><span class="line">&#123;</span><br><span class="line"> for file in `ls $1`</span><br><span class="line"> do</span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断是否是文件夹，如果是文件夹则删除文件夹中的 dev <span class="built_in">test</span> release 分支</span></span><br><span class="line"> if [ -d $1"/"$file ]</span><br><span class="line"> then</span><br><span class="line">  cd $&#123;file&#125;</span><br><span class="line">  pwd</span><br><span class="line">  git checkout master;</span><br><span class="line">  git branch -D dev; git branch -D test; git branch -D release;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> git checkout master; git pull;</span></span><br><span class="line">  cd ..</span><br><span class="line"> fi</span><br><span class="line"> done</span><br><span class="line">&#125;</span><br><span class="line">readfile "./"</span><br><span class="line"></span><br><span class="line">echo '完美的运行！'</span><br></pre></td></tr></table></figure><p>代码思路：</p><ol><li>for循环遍历当前文件夹下的文件</li><li>判断每个文件的类型是否是文件夹</li><li>如果是文件夹则进入该文件夹中，</li><li>切换master分支，避免下面一步时删除分支失败（git 删除分支时是不能删除当前所在的分支的，例如 当前在dev分支，执行git branch -D dev 时会提示Cannot delete branch ‘dev’…）</li><li>删除文件夹中的 dev test release 分支</li><li>最后打印运行结束</li></ol><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>准备shell<ol><li>新建文本文档，将以上代码copy进来，保存命名为<code>clear-git-branch.sh</code> 一定要以<code>.sh</code>为文件后缀</li><li>将文件放在需要批量更新代码的文件夹中</li></ol></li></ol><p>文件结构大概长这样：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1geaeceaslhj30ty0h6q7s.jpg" alt="image-20200429094911638"></p><ol start="2"><li><p>运行脚本</p><p><code>window平台：</code></p><p>​    方式1：双击运行shell脚本；</p><p>​    方式2：使用GitBash工具</p><p>​        先切换到存放代码的目录，然后执行代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clear-git-branch.sh</span><br></pre></td></tr></table></figure><p><code>macOS或Linux平台：</code></p><p>需先给shell脚本添加执行的权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x clear-git-branch.sh</span><br></pre></td></tr></table></figure><p>然后运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clear-git-branch.sh</span><br></pre></td></tr></table></figure></li></ol><p>运行效果:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./clear-git-branch.sh</span></span><br><span class="line">/f/code/sycode/dcit-serxxxxxxxx</span><br><span class="line">Already on 'master'</span><br><span class="line">Your branch is up to date with 'origin/master'.</span><br><span class="line">Deleted branch dev (was 6c999e7).</span><br><span class="line">Deleted branch test (was a4238eb).</span><br><span class="line">Deleted branch release (was 6603884).</span><br><span class="line">Switched to a new branch 'dev'</span><br><span class="line">Branch 'dev' set up to track remote branch 'dev' from 'origin'.</span><br><span class="line">Switched to a new branch 'test'</span><br><span class="line">Branch 'test' set up to track remote branch 'test' from 'origin'.</span><br><span class="line">Switched to a new branch 'release'</span><br><span class="line">Branch 'release' set up to track remote branch 'release' from 'origin'.</span><br><span class="line">Switched to branch 'master'</span><br><span class="line">Your branch is up to date with 'origin/master'.</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>该脚本会把所有仓库的分支切换到master分支，如后续开发需要自己手动切回自己的特性分支。</p></li><li><p>可能会有失败的案例，当你的分支在dev/test/release且有正在编辑的代码，则会删除失败。</p></li></ol><p>对于这种情况需要自行判断是否保存并加以处理。</p><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h3><p>完美，哈哈。</p><p>刚开始学习shell，有错误还请大佬指出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用脚本批量更新git分支&quot;&gt;&lt;a href=&quot;#使用脚本批量更新git分支&quot; class=&quot;headerlink&quot; title=&quot;使用脚本批量更新git分支&quot;&gt;&lt;/a&gt;使用脚本批量更新git分支&lt;/h1&gt;&lt;p&gt;@auther &lt;code&gt;张念磊&lt;/code&gt;&lt;b
      
    
    </summary>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>后端开发 - 发现一个SQL的新技能</title>
    <link href="http://yoursite.com/2020/04/28/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91-%E5%8F%91%E7%8E%B0%E4%B8%80%E4%B8%AASQL%E7%9A%84%E6%96%B0%E6%8A%80%E8%83%BD/"/>
    <id>http://yoursite.com/2020/04/28/后端开发-发现一个SQL的新技能/</id>
    <published>2020-04-28T04:40:36.000Z</published>
    <updated>2020-04-28T05:07:40.032Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 不是发明创造，以前没见过这种用法，写下来记录一下。</p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>需要写一个添加根据用户<code>真实姓名</code>或<code>用户名</code>或<code>工号</code>模糊查询用户信息的接口</p><p>但是公司用了<code>shardingjdbc</code>且是较低版本，不支持用 OR关键字，短时间内不可能将组件升级。</p><h2 id="怎么思路"><a href="#怎么思路" class="headerlink" title="怎么思路"></a>怎么思路</h2><p>使用concat() 函数</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat( real_name, '*', user_name, '*', work_no ) LIKE concat('%',#&#123;searchParam&#125;, '%' )</span><br></pre></td></tr></table></figure><p>哈哈，很简单，很神奇。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 不是发明创造，以前没见过这种用法，写下来记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;需要写一个添加根据
      
    
    </summary>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MacOS笔记 - 下修改 MAC 地址</title>
    <link href="http://yoursite.com/2020/04/20/MacOS%E7%AC%94%E8%AE%B0-%E4%B8%8B%E4%BF%AE%E6%94%B9-MAC-%E5%9C%B0%E5%9D%80/"/>
    <id>http://yoursite.com/2020/04/20/MacOS笔记-下修改-MAC-地址/</id>
    <published>2020-04-20T01:28:00.000Z</published>
    <updated>2020-04-20T02:57:55.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MacOS笔记-下修改-MAC-地址"><a href="#MacOS笔记-下修改-MAC-地址" class="headerlink" title="MacOS笔记 - 下修改 MAC 地址"></a>MacOS笔记 - 下修改 MAC 地址</h1><p>在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig en0 ether 00:00:00:00:00:00</span><br></pre></td></tr></table></figure><p>其中 en0 是你的第一块网卡（以太网卡，非无线），后面的 12 个 0 是要改成的目标网卡地址，输入以后会要求你输入管理员密码，别忘了给自己的账号先设定管理员密码，确认后当前机器的网卡地址会临时性生效，当重启后网卡地址又恢复成机器本身的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MacOS笔记-下修改-MAC-地址&quot;&gt;&lt;a href=&quot;#MacOS笔记-下修改-MAC-地址&quot; class=&quot;headerlink&quot; title=&quot;MacOS笔记 - 下修改 MAC 地址&quot;&gt;&lt;/a&gt;MacOS笔记 - 下修改 MAC 地址&lt;/h1&gt;&lt;p&gt;在终
      
    
    </summary>
    
    
      <category term="MacOS" scheme="http://yoursite.com/tags/MacOS/"/>
    
      <category term="修改MAC地址" scheme="http://yoursite.com/tags/%E4%BF%AE%E6%94%B9MAC%E5%9C%B0%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 如何在子组件中改变prop传入的值？</title>
    <link href="http://yoursite.com/2020/04/20/Vue-%E5%A6%82%E4%BD%95%E5%9C%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B8%AD%E6%94%B9%E5%8F%98prop%E4%BC%A0%E5%85%A5%E7%9A%84%E5%80%BC%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/04/20/Vue-如何在子组件中改变prop传入的值？/</id>
    <published>2020-04-20T01:04:04.000Z</published>
    <updated>2020-04-20T01:24:42.406Z</updated>
    
    <content type="html"><![CDATA[<p>Vue - 如何在子组件中改变prop传入的值？</p><p> 我们都知道在vue中，父组件传入子组件的变量是存放在props属性中的，我们在调用变量的时候是跟data里面的变量一样的，都是通过this.变量来调用，但是如果想要在子组件中直接改变props中的属性浏览器会报错</p><p>如何解决这个问题呢？官方给出了一个方案(支持Vue2.3.0+)</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdzyy9pn1yj30u00yqn6k.jpg" alt="image-20200420092057528"></p><p>参考：</p><p><a href="[https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6](https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-修饰符">https://cn.vuejs.org/v2/guide/components…</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue - 如何在子组件中改变prop传入的值？&lt;/p&gt;
&lt;p&gt; 我们都知道在vue中，父组件传入子组件的变量是存放在props属性中的，我们在调用变量的时候是跟data里面的变量一样的，都是通过this.变量来调用，但是如果想要在子组件中直接改变props中的属性浏览器会
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="prop" scheme="http://yoursite.com/tags/prop/"/>
    
      <category term="sync" scheme="http://yoursite.com/tags/sync/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 父组件如何更新子组件的参数?</title>
    <link href="http://yoursite.com/2020/04/20/Vue-%E7%88%B6%E7%BB%84%E4%BB%B6%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E5%8F%82%E6%95%B0-1/"/>
    <id>http://yoursite.com/2020/04/20/Vue-父组件如何更新子组件的参数-1/</id>
    <published>2020-04-20T00:51:17.000Z</published>
    <updated>2020-04-20T01:22:02.153Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法1-父组件更新子组件的prop参数"><a href="#方法1-父组件更新子组件的prop参数" class="headerlink" title="方法1. 父组件更新子组件的prop参数"></a>方法1. 父组件更新子组件的prop参数</h3><p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。如果想在子组件中改变prop，可以参考官方解释<a href="[https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6](https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-修饰符">https://cn.vuejs.org/v2/guide/components…</a>)</p><h3 id="方法2-父组件调用子组件的方法"><a href="#方法2-父组件调用子组件的方法" class="headerlink" title="方法2. 父组件调用子组件的方法"></a>方法2. 父组件调用子组件的方法</h3><ol><li>在子组件中定义函数 empty()</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdzy5c3r3tj30jz0b6dgu.jpg" alt="image-20200417173318790"></p><ol><li>在父组件中的使用处添加ref  ref=”upload”</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdzy5cya5zj30gf083mxs.jpg" alt="image-20200417173352552"></p><ol><li>在需要的地方调用子组件中的函数 </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.upload.empty();</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdzy5b8vwbj30bo08y0tb.jpg" alt="image-20200417173511471"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;方法1-父组件更新子组件的prop参数&quot;&gt;&lt;a href=&quot;#方法1-父组件更新子组件的prop参数&quot; class=&quot;headerlink&quot; title=&quot;方法1. 父组件更新子组件的prop参数&quot;&gt;&lt;/a&gt;方法1. 父组件更新子组件的prop参数&lt;/h3&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>博客平台对比 - 想写博客该选用那个平台呢？</title>
    <link href="http://yoursite.com/2020/04/19/%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0%E5%AF%B9%E6%AF%94-%E6%83%B3%E5%86%99%E5%8D%9A%E5%AE%A2%E8%AF%A5%E9%80%89%E7%94%A8%E9%82%A3%E4%B8%AA%E5%B9%B3%E5%8F%B0%E5%91%A2%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/04/19/博客平台对比-想写博客该选用那个平台呢？/</id>
    <published>2020-04-19T03:27:41.000Z</published>
    <updated>2020-04-19T04:03:54.759Z</updated>
    
    <content type="html"><![CDATA[<p>对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，github上找的博客项目，删删改改改成自己的，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：</p><ol><li>几大平台中<code>CSDN</code>的SEO做的最好，原因见下图：</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx11o5ruj31lp0u0tga.jpg" alt="image-20200419001254184"></p><p>访问量最多的能有7000+ <a href="https://blog.csdn.net/Mr_Zhang____" target="_blank" rel="noopener">https://blog.csdn.net/Mr_Zhang..</a></p><p>访问最多的几篇有一个共性：都是解决具体的问题，也是让人哭笑不得的事情。</p><p>但是这类文章要写好也不是件容易的事情，先写解决方案，在写原理，出现这种问题的原因。这样让别人看了也能有一点收获。</p><p>其他文章无人问津。</p><ol start="2"><li>博客平台发布的文章全都需要审核，审核时长不定，且有一定的几率会不过审，自己搭建的博客则没有审核机制。</li><li>自己搭建的博客是发布在的自己的腾讯云云服务器上的，网址： <a href="zhangnlei.cn">zhangnlei.cn</a>。云服务器需要定期维护，对个人来说是需要不小的时间成本和金钱投入。</li></ol><p>zhangnlei</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx0322b7j32160j4dj0.jpg" alt="image-20200419112759165"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdyx07vp9dj31ta0kitbx.jpg" alt="image-20200419112806994"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，github上找的博客项目，删删改改改成自己的，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;几大平台中&lt;code&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>后端 - Git学习分享</title>
    <link href="http://yoursite.com/2020/04/18/%E5%90%8E%E7%AB%AF-Git%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/"/>
    <id>http://yoursite.com/2020/04/18/后端-Git学习分享/</id>
    <published>2020-04-18T11:22:42.000Z</published>
    <updated>2020-04-18T11:55:51.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后端-Git学习分享"><a href="#后端-Git学习分享" class="headerlink" title="后端 - Git学习分享"></a>后端 - Git学习分享</h1><p>@auther <code>张念磊</code><br>@date 2020/2/17</p><h2 id="一个学习git的网站"><a href="#一个学习git的网站" class="headerlink" title="一个学习git的网站"></a>一个学习git的网站</h2><p><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">https://learngitbranching.js.org/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基础</span></span><br><span class="line">git checkout -b hotfix # 新建一个分支</span><br><span class="line"></span><br><span class="line">git checkout C2 # 分离head</span><br><span class="line">git branch -f master C2 # 将分支指向提交C2</span><br><span class="line">git branch -f master HEAD^ # 将master指向HEAD的上一个节点</span><br><span class="line">git branch -f master HEAD~3 # 将master指向HEAD的前面第三个节点</span><br><span class="line">git reset Head^ # 撤销一次本地提交</span><br><span class="line">git revert HEAD^ # 撤销一次远程提交</span><br><span class="line"></span><br><span class="line">git rebase master # 改变代码提交的顺序</span><br><span class="line">git cherry-pick C2 C3 # 将C2 C3次提交添加到当前分支 git cherry-pick 'commit id'  # 复制一个特定的提交到当前的分支</span><br><span class="line">git rebase -i HEAD~4 # 交互式rebase最近的4次提交</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53zzv41j30z50q90v5.jpg" alt="image-20200218102321108"></p><p>示例 ： 把分支以图像的方式展现给用户</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdy542q42ej30ql0fggn3.jpg" alt="image-20200218220559729"></p><h3 id="通关截图"><a href="#通关截图" class="headerlink" title="通关截图"></a>通关截图</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdy5414r55j30yq0rtmzv.jpg" alt="image-20200218225905225"></p><p>主要介绍的两个命令 rebase cherry-pick </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53yvq4nj30q00pj0um.jpg" alt="image-20200327160103150"></p><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p>有没有经常敲错命令？比如<code>git status</code></p><p>如果敲<code>git st</code>就表示<code>git status</code>那就简单多了，当然这种偷懒的办法我们是极力赞成的。</p><p>我们只需要敲一行命令，告诉Git，以后<code>st</code>就表示<code>status</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.st status</span><br></pre></td></tr></table></figure><p>好了，现在敲<code>git st</code>看看效果。</p><p>当然还有别的命令可以简写，很多人都用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure><p>提交就可以简写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git ci -m &quot;bala bala bala...&quot;</span><br></pre></td></tr></table></figure><p><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p><p><code>git log</code></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdy53zj3urj317w0u0dke.jpg" alt="image-20200327154624267"></p><p>甚至还有人丧心病狂地把<code>lg</code>配置成了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure><p>来看看<code>git lg</code>的效果：</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd8j6l772pj317w0u015d.jpg" alt="image-20200327154509668" style="zoom: 50%;" /></p><h2 id="其他操作："><a href="#其他操作：" class="headerlink" title="其他操作："></a>其他操作：</h2><p>连接远程仓库<br><strong>git remote add origin 仓库地址</strong></p><p>查看远程连接<br><strong>git remote -v</strong></p><p>git取消与远程仓库的连接<br><strong>git remote remove origin</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;后端-Git学习分享&quot;&gt;&lt;a href=&quot;#后端-Git学习分享&quot; class=&quot;headerlink&quot; title=&quot;后端 - Git学习分享&quot;&gt;&lt;/a&gt;后端 - Git学习分享&lt;/h1&gt;&lt;p&gt;@auther &lt;code&gt;张念磊&lt;/code&gt;&lt;br&gt;@date 
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 滚动条滚动到最下方时更新</title>
    <link href="http://yoursite.com/2020/04/18/Vue-%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%BB%9A%E5%8A%A8%E5%88%B0%E6%9C%80%E4%B8%8B%E6%96%B9%E6%97%B6%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2020/04/18/Vue-滚动条滚动到最下方时更新/</id>
    <published>2020-04-18T09:38:13.000Z</published>
    <updated>2020-04-20T00:56:45.598Z</updated>
    
    <content type="html"><![CDATA[<p><code>代码展示</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">watchScroll() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="keyword">this</span>.$refs[<span class="string">"discussInfoBox"</span>];</span><br><span class="line">    <span class="keyword">const</span> offsetHeight = el.offsetHeight;</span><br><span class="line">    el.onscroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> scrollTop = el.scrollTop;</span><br><span class="line">      <span class="keyword">const</span> scrollHeight = el.scrollHeight;</span><br><span class="line">      <span class="keyword">if</span> (offsetHeight + scrollTop - scrollHeight &gt;= <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要执行的代码</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"get info "</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>使用步骤</code></p><ol><li>第三行中的<code>discussInfoBox</code>为要监听的div的ID</li><li>在第十行编写当滚动条滚动到最下方时需要调用的函数</li><li>在需要的地方调用该函数。例如created方法或其他监听事件中</li></ol><p><code>原理解释</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;代码展示&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>折腾了半下午搞定了hexo，记录一下</title>
    <link href="http://yoursite.com/2020/04/18/%E6%8A%98%E8%85%BE%E4%BA%86%E5%8D%8A%E4%B8%8B%E5%8D%88%E6%90%9E%E5%AE%9A%E4%BA%86hexo%EF%BC%8C%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B/"/>
    <id>http://yoursite.com/2020/04/18/折腾了半下午搞定了hexo，记录一下/</id>
    <published>2020-04-18T09:29:35.000Z</published>
    <updated>2020-04-19T06:52:36.783Z</updated>
    
    <content type="html"><![CDATA[<p>阅读本文需要大约3分钟</p><h1 id="为什么要使用GitHub-Page搭建博客？"><a href="#为什么要使用GitHub-Page搭建博客？" class="headerlink" title="为什么要使用GitHub Page搭建博客？"></a>为什么要使用GitHub Page搭建博客？</h1><p>关键词：<code>Hexo</code> 、<code>GitHub Page</code>、<code>Typora</code>、<code>Blog</code></p><p>对于我的个人博客，我一直没有停下折腾的脚步，最早的博客是大二时搭在腾讯云学生服务器上，后面也尝试了CSDN，cnblog，简书，掘金等博客平台，下面是我做的一个简单地分析对比：</p><h2 id="博客平台简分析对比"><a href="#博客平台简分析对比" class="headerlink" title="博客平台简分析对比"></a>博客平台简分析对比</h2><ol><li><p>几大平台中<code>CSDN</code>的SEO做的最好，访问量最多的能有7000+ <a href="https://blog.csdn.net/Mr_Zhang____" target="_blank" rel="noopener">https://blog.csdn.net/Mr_Zhang..</a></p></li><li><p>在博客平台发布文章需要审核，审核时长不定，且有一定的几率会不过审，自己搭建的博客则无需审核机制。</p></li><li>自己搭的博客是发布在的自己的腾讯云云服务器上的，网址： <a href="zhangnlei.cn">zhangnlei.cn</a>。博客服务需要自己发布，云服务器需要定期维护，对个人来说是需要不小的时间成本和金钱投入。（我的博客服务是GitHub上找的一个开源项目，删删改改，为自己所用）</li><li>因为网页的编辑器不是很稳点，我写博客一般都是先在本地写好Markdown，然后在贴到博客的编辑器中，再添加标签、分类等，最后再发布。需要很多重复工作。</li></ol><p>综上：自己的服务器有一定的服务维护成本，博客平台编辑体验不佳、自由度不高。</p><p>所以决定尝试使用<code>GitHub Page</code>+<code>Hexo</code>搭建了自己的博客，优点有以下：</p><h2 id="使用GitHub-Hexo搭建博客的优点"><a href="#使用GitHub-Hexo搭建博客的优点" class="headerlink" title="使用GitHub+Hexo搭建博客的优点"></a>使用GitHub+Hexo搭建博客的优点</h2><ol><li>无需维护服务器，服务是挂载在github的服务器上，由github维护（现由微软收购），维护成本几乎为0，且足够稳定。</li><li>自由度高，发布的内容随心而定，无需受平台的限制。</li><li>编辑体验好，无需反复搬运文本，打标签等，搭配软件Typora在本地编写MarkDown，博客编写完后一行命令一秒发布，契合程序员的操作体验。</li></ol><p>当然也有缺点：对非开发者来说需要一定的门槛，可能连GitHub是什么都不知道。</p><p>好下面简单介绍一下我使用到的工具和服务：</p><h1 id="使用到的工具和服务"><a href="#使用到的工具和服务" class="headerlink" title="使用到的工具和服务"></a>使用到的工具和服务</h1><ol><li><p>Hexo是一个非常成熟的博客框架，可以根据用户编辑的Markdown文件生成静态的htnl文件。当然用户可以选择自己喜欢的主题插件安装，以生成优美博客界面。</p></li><li><p>GitHub提供了一个GitHub Page的功能，每个用户都可以有一个属于自己域名的静态页面。</p></li><li><p>Typora软件，本地编写md文件，实时编写实时渲染，使用体验极佳。</p></li></ol><p>于是使用Hexo + GitHub Page便可搭建一个免费的个人博客，搭配Typora在本地编写MarkDown，舒适度不要太高。</p><p>有了上面的工具做基础，实现起来就很简单啦，具体的步骤就不详细说明了，网上一搜一大把。</p><p>这里提供几个搜索的关键词：<code>github.io</code>/<code>github page</code>/<code>hexo</code>/<code>个人博客</code>。</p><p>安装过程并非一帆风顺，好在hexo技术和社区非常成熟，官方有文档、网络上也有非常多帖子。</p><h1 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h1><p>我选用的Hexo主题是Vue风格的<code>vexo</code>主题，干净简单。本人比较喜欢Vue的主题，Typora用的也是类Vue的主题。</p><p>上一张博客<a href="https://zhangnlei.github.io/" target="_blank" rel="noopener">zhangnlei.github.io</a>的效果图：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdz25fwppgj31gz0u04au.jpg" alt="image-20200419142605032"></p><p>下图为Typora软件截图：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdz27fy72mj313q0u045u.jpg" alt="image-20200419142803105"></p><p>是不是都很VUE。哈哈</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>以后会在这里记录一些心情、读书笔记、编程技术分享之类的文章。</p><p>感谢阅读。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阅读本文需要大约3分钟&lt;/p&gt;
&lt;h1 id=&quot;为什么要使用GitHub-Page搭建博客？&quot;&gt;&lt;a href=&quot;#为什么要使用GitHub-Page搭建博客？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用GitHub Page搭建博客？&quot;&gt;&lt;/a&gt;为
      
    
    </summary>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="GitHub Page" scheme="http://yoursite.com/tags/GitHub-Page/"/>
    
      <category term="Typora" scheme="http://yoursite.com/tags/Typora/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
</feed>
